name: Windows - Build Qx
on:
  workflow_call:
    secrets:
      qt_ffynnon_cred:
        description: 'Credentials for getting Qt from Ffynnon'
        required: true
env:
  qt_install_dir: ${{ github.workspace }}/Qt/Install
  qx_src_suffix: Qx/Source
  qx_src_dir: ${{ github.workspace }}/Qx/Source
  qx_build_dir: ${{ github.workspace }}/Qx/Build

jobs:
  build-qx:
    name: Build Qx - Windows (Release)
    strategy:
      fail-fast: false
      matrix:
        linkage: [{type: shared, cmake_bsl: ON}, {type: static, cmake_bsl: OFF}]
    runs-on: windows-latest
    env:
      vs_dir: C:/Program Files/Microsoft Visual Studio/2022/Enterprise
      cmake_gen: Ninja Multi-Config
    steps:
    - name: Set derived variables with shell because GitHub Actions env context sucks
      run: |
        echo "qx_package_path=${{ env.qx_build_dir }}/out/dist" >> $Env:GITHUB_ENV
        $qx_install_path="${{ env.qx_build_dir }}/out/install"
        echo "qx_install_path=$qx_install_path" >> $Env:GITHUB_ENV
        echo "qt_cmake=${Env:qt_install_dir}/bin/qt-cmake.bat" >> $Env:GITHUB_ENV
    - name: Install Qt (custom build)
      uses: oblivioncth/actions/general/install-and-cache-qt-from-ffynnon@dev
      with:
        version: 6.5.1
        os: windows
        compiler: msvc2022
        linkage: ${{ matrix.linkage.type }}
        path: ${{ env.qt_install_dir }}
        credentials: ${{ secrets.qt_ffynnon_cred }}
    - name: Install Doxygen
      uses: oblivioncth/actions/general/cache-and-install-doxygen-from-ffynnon@dev
      with:
        version: 1.9.8
        os: windows
        credentials: ${{ secrets.qt_ffynnon_cred }}
    - name: Install Graphviz
      run: choco install graphviz
    - name: Checkout PxCrypt
      uses: actions/checkout@v4
      with:
        path: ${{ env.qx_src_suffix }}
        fetch-depth: 0 # Required for verbose versioning to work correctly
    - name: Build/Install Qx
      working-directory: ${{ env.qx_src_dir }}
      shell: cmd
      run: |
        echo "Setup C++ Build Environment..."
        CALL "${{ env.vs_dir }}\Common7\Tools\VsDevCmd.bat" -arch=amd64
        echo "Configure CMake using Qt wrapper..."
        CALL "${{ env.qt_cmake }}" -G "${{ env.cmake_gen }}" -S "${{ env.qx_src_dir}}" -B "${{ env.qx_build_dir }}" -D QX_DOCS=ON -D QX_TESTS=ON -D BUILD_SHARED_LIBS=${{ matrix.linkage.cmake_bsl }}
        echo "Changing to build directory..."
        cd "%qx_build_dir%"
        echo "Building Qx Relase/Docs ..."
        cmake --build . --target all --config Release
        echo "Running tests..."
        ctest -C Release --output-on-failure
        echo "Installing Qx Release/Docs..."
        cmake --install . --config Release
        echo "Packaging Qx..."
        cpack -C "Release"
        echo "Build complete."
    - name: Get Qx artifact name
      run: |
        $artifact_name=$((Get-ChildItem -Path "${{ env.qx_package_path }}" -Filter *.zip)[0].BaseName)
        echo "current_artifact_name=$artifact_name" >> $Env:GITHUB_ENV
    - name: Upload Qx build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.current_artifact_name }}
        path: ${{ env.qx_install_path }}
        if-no-files-found: error
