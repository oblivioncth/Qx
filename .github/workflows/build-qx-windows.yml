name: Windows - Build Qx (Qt 6.3.0)
on:
  workflow_dispatch:
  workflow_call:
    outputs:
      artifact_name:
        description: "The resultant build artifact"
        value: ${{ jobs.build-qx.outputs.job_artifact_name }}

env:
  qt_install_name: qt-6.3.0-win32-msvc-x64-static-debug-and-release.7z
  qt_install_url: https://mega.nz/file/cmpElKSZ
  qt_install_dec_key: ${{ secrets.QT_BUILD_DECRYPT_KEY }}
  qt_install_dir: ${{ github.workspace }}/Qt/Install/
  qt_download_dir: ${{ github.workspace }}/Qt/Download
  qx_src_suffix: Qx/Source/
  qx_src_dir: ${{ github.workspace }}/Qx/Source/
  qx_build_dir: ${{ github.workspace }}/Qx/Build/

jobs:
  build-qx:
    name: Build Qx master (Debug/Release)
    runs-on: windows-latest
    env:
      vc_vars: C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat
      cmake_gen: Ninja Multi-Config
    outputs:
      job_artifact_name: ${{ steps.set_artifact_name.outputs.qx_artifact_name }}
    steps:
    - name: Set derived variables with shell because GitHub Actions env context sucks
      run: |
        echo "qt_install_dest=${{ env.qt_download_dir }}/${{ env.qt_install_name }}" >> $Env:GITHUB_ENV
        echo "qx_package_path=${{ env.qx_src_dir }}/out/dist/" >> $Env:GITHUB_ENV
        $qx_install_path='${{ env.qx_src_dir }}/out/install/'
        echo "qx_install_path=$qx_install_path" >> $Env:GITHUB_ENV
        echo "qt_cmake=${qx_install_path}/bin/qt-cmake" >> $Env:GITHUB_ENV
        echo "qt_help_gen_def=QT_HELP_GEN_PATH:STRING=${qx_install_path}/bin/qhelpgenerator.exe" >> $Env:GITHUB_ENV
        echo "qt_docs_dir_def=QT_HELP_GEN_PATH:STRING=${qx_install_path}/doc" >> $Env:GITHUB_ENV
    - name: Cache Qt Build
      id: cache-qt
      uses: actions/cache@v3
      with:
        path: ${{ env.qt_install_dir }}
        key: ${{ env.qt_install_name }}
    - name: Install megatools
      if: steps.cache-qt.outputs.cache-hit != 'true'
      run: choco install megatools
    - name: Download Qt Build
      if: steps.cache-qt.outputs.cache-hit != 'true'
      run: megatools dl "${Env:qt_install_url}#${Env:qt_install_dec_key}" --path "${{ env.qt_download_dir }}"
    - name: Extract Qt Build
      if: steps.cache-qt.outputs.cache-hit != 'true'
      run: 7z x ${{ env.qt_install_dest }} -o${{ env.qt_install_dir }}
    - name: Install Doxygen
      run: choco install doxygen.install
    - name: Checkout Qx
      uses: actions/checkout@v3
      with:
        path: ${{ env.qx_src_suffix }}
    - name: Build/Install Qx
      shell: cmd
      working-directory: ${{ env.qx_src_dir }}
      run: |
        @echo off
        echo Setting up VC++ environment...
        CALL "%vc_vars%"
        echo Configuring CMake...
        CALL "%qt_cmake%" -G "%cmake_gen%" -S "%qx_src_dir%" -B "%qx_build_dir%" -D "%qt_help_gen_def%" -D "%qt_docs_dir_def%"
        echo Changing to build directory...
        cd /D "%qx_build_dir%"
        echo Building Qx debug...
        cmake --build . --target all --config Debug
        echo Building Qx release...
        cmake --build . --target all --config Release
        echo Building Qx docs...
        cmake --build . --target docs --config Release
        echo Installing Qx...
        cmake --build . --target install --config Release
        echo Packaging Qx...
        cpack -C Debug;Release
        echo Build complete.
    - name: Get current time
      uses: josStorer/get-current-time@v2
      id: current-time
      with:
        format: YYYYMMDD-HHmmss
        utcOffset: "-05:00"
    - name: Get Qx package name
      run: echo "qx_package_name=$(Get-ChildItem -Path "${{ env.qx_package_path }}" -Name -Filter *.zip)" >> $Env:GITHUB_ENV
    - name: Set output artifact name
      id: set_artifact_name
      env:
        artifact_time: ${{ steps.current-time.outputs.formattedTime }}
      run: echo "::set-output name=qx_artifact_name::${{ env.qx_package_name }}[${Env:GITHUB_BASE_REF }_${{ env.artifact_time }}]"
    - name: Upload Qx build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.set_artifact_name.outputs.qx_artifact_name }}
        path: ${{ env.qx_install_path }}
        if-no-files-found: error
