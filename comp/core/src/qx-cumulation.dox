namespace Qx
{
//===============================================================================================================
// Cumulation
//===============================================================================================================

/*!
 *  @class Cumulation qx/core/qx-cumulation.h
 *  @ingroup qx-core
 *
 *  @brief The Cumulation template class tracks the sum of multiple key-value components that can be changed
 *  independently.
 *
 *  A cumulation is a collection of key-value pairs (where V is any arithmetic type) with which the sum of all
 *  contained values is always known, and any individual value can be added, removed, or updated through its
 *  corresponding key.
 *
 *  Additionally, a cumulation can have optional scalers applied to its components in order to differently
 *  weight their individual effect on the total.
 *
 *  This is generally useful for keeping a running total, but when a previously added value may need to be
 *  revised later, such as when tracking the overall progress of multiple downloads from a server using their
 *  individual progress as components.
 */

//-Constructor----------------------------------------------------------------------------------------------
//Public:
/*!
 * @fn template <typename K, typename V> Cumulation<K, V>::Cumulation()
 *
 *  Creates an empty cumulation with a total of zero.
 */

//-Class Functions----------------------------------------------------------------------------------------------
//Public:
/*!
 *  @fn template <typename K, typename V> void Cumulation<K, V>::insert(K component, V value, V scaler = 1)
 *
 *  Inserts a new component with key @a component, value @a value, and scaler @a scaler.
 *
 *  If there is already a component with the same key, that component's value and scaler are replaced with
 *  @a value and @a scaler respectively.
 */

/*!
 *  @fn template <typename K, typename V> void Cumulation<K, V>::setValue(K component, V value)
 *
 *  Sets the value of @a component to @a value.
 *
 *  If the cumulation does not contain the specified component, this method does nothing.
 */

/*!
 *  @fn template <typename K, typename V> void Cumulation<K, V>::setScaler(K component, V scaler)
 *
 *  Sets the scaler of @a component to @a scaler.
 *
 *  The amount that a component contributes to a cumulation's total is its value multiplied
 *  by its scaler.
 *
 *  If the cumulation does not contain the specified component, this method does nothing.
 */

/*!
 *  @fn template <typename K, typename V> void Cumulation<K, V>::remove(K component)
 *
 *  Removes the value associated with the key @a component from the cumulation, if it exists.
 */

/*!
 *  @fn template <typename K, typename V> void Cumulation<K, V>::clear()
 *
 *  Removes all keys/values from the cumulation, resulting in a total of zero.
 */

/*!
 *  @fn template <typename K, typename V> bool Cumulation<K, V>::contains(K component) const
 *
 *  Returns @c true if the cumulation contains a value associated with the key @a component; otherwise returns
 *  @c false.
 */

/*!
 *  @fn template <typename K, typename V> V Cumulation<K, V>::value(K component) const
 *
 *  Returns the value of @a component.
 */

/*!
 *  @fn template <typename K, typename V> V Cumulation<K, V>::total() const
 *
 *  Returns the current total of the cumulation, which is the sum of all its component values.
 */

/*!
 * @fn template <typename K, typename V> qsizetype Cumulation<K, V>::count() const
 *
 *  Returns that number of components that compose the cumulation.
 */

/*!
 * @fn template <typename K, typename V> bool Cumulation<K, V>::isEmpty() const
 *
 *  Returns @c true if the cumulation has no components; otherwise, returns @c false.
 */

/*!
 *  @fn template <typename K, typename V> V Cumulation<K, V>::mean() const
 *
 *  Returns the current mean of the cumulation, which is the sum of all its component values divided the
 *  number of components, or zero if the cumulation is empty.
 *
 *  If @a V is an integral type, the result is rounded to the nearest integer.
 */

}
