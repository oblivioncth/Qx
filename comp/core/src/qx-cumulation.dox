namespace Qx
{
//===============================================================================================================
// Cumulation
//===============================================================================================================

/*!
 *  @class Cumulation
 *  @ingroup qx-core
 *
 *  @brief The Cumulation template class tracks the sum of multiple key-value components that can be change
 *  independently.
 *
 *  A cumulation is a collection of key-value pairs (where V is any arithmetic type) with which the sum of all
 *  contained values is always known, and any individual value can added, removed, or updated through its
 *  corresponding key.
 *
 *  This is generally useful for keeping a running total, but when a previously added value may need to be
 *  revised later, such as when tracking the overall progress of multiple downloads from a server using their
 *  individual progress as components.
 */

//-Constructor----------------------------------------------------------------------------------------------
//Public:
/*!
 * @fn template <typename K, typename V> Cumulation<K, V>::Cumulation()
 *
 *  Creates an empty cumulation with a total of zero.
 */

//-Class Functions----------------------------------------------------------------------------------------------
//Public:
/*!
 *  @fn template <typename K, typename V> void Cumulation<K, V>::clear()
 *
 *  Removes all keys/values from the cumulation, resulting in a total of zero.
 */

/*!
 *  @fn template <typename K, typename V> void Cumulation<K, V>::remove(K component)
 *
 *  Removes the value associated with the key @a component from the cumulation.
 */

/*!
 *  @fn template <typename K, typename V> void Cumulation<K, V>::setValue(K component, V value)
 *
 *  Sets the value of @a component to @a value. The component will be added to the cumulation if it did not
 *  already contain it.
 */

/*!
 *  @fn template <typename K, typename V> bool Cumulation<K, V>::contains(K component) const
 *
 *  Returns @c true if the cumulation contains a value associated with the key @a component; otherwise returns
 *  @c false.
 */

/*!
 *  @fn template <typename K, typename V> V Cumulation<K, V>::value(K component) const
 *
 *  Returns the value of @a component.
 */

/*!
 *  @fn template <typename K, typename V> V Cumulation<K, V>::total() const
 *
 *  Returns the current total of the cumulation, which is the sum of all its component values.
 */

}
