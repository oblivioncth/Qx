namespace Qx
{
//===============================================================================================================
// ExclusiveAccess
//===============================================================================================================

/*!
 *  @class ExclusiveAccess qx/core/qx-exclusiveaccess.h
 *  @ingroup qx-core
 *
 *  @brief The ExclusiveAccess template class is a convenience class that simplifies access to resources
 *  secured by a mutex.
 *
 *  This class is essentially a slightly more capable QMutexLocker and can be used in the same ways; however,
 *  it couples access to the data protected by the mutex (in cases where there is, or data can easily be
 *  wrapped within, a single resource) along with the automatic locking/unlocking of QMutexLocker.
 *
 *  This can be useful when exclusive access to data needs to be provided by a class/function:
 *
 *  @snippet qx-exclusiveaccess.cpp 0
 */

//-Constructor----------------------------------------------------------------------------------------------
//Public:
/*!
 * @fn ExclusiveAccess<Type, Mutex>::ExclusiveAccess(AccessType* data, Mutex* mutex)
 *
 *  Constructs an ExclusiveAccess and locks @a mutex. The mutex will be unlocked when the ExclusiveAccess is
 *  destroyed. If @a mutex is @c nullptr, ExclusiveAccess only provides access to @a data.
 *
 *  @sa QMutexLocker.
 */

/*!
 * @fn ExclusiveAccess<Type, Mutex>::ExclusiveAccess(ExclusiveAccess&& other)
 *
 *  Move-constructs and ExclusiveAccess from @a other. The mutex, data pointer, and state of @a other is
 *  transferred to the newly constructed instance. After the move, @a other will no longer manage the mutex,
 *  nor have a valid data pointer.
 *
 *  @sa QMutexLocker.
 */

//-Destructor------------------------------------------------------------------------------------------------
//Public:
/*!
 * @fn ExclusiveAccess<Type, Mutex>::~ExclusiveAccess()
 *
 *  Destroys the ExclusiveAccess and unlocks the mutex provided by the constructor if it's still locked.
 */

//-Class Functions----------------------------------------------------------------------------------------------
//Public:
/*!
 *  @fn void ExclusiveAccess<Type, Mutex>::isLocked() const
 *
 *  Returns @c true if this ExclusiveAccess is currently locking its associated mutex; otherwise, returns
 *  @c false.
 */

/*!
 *  @fn void ExclusiveAccess<Type, Mutex>::mutex() const
 *
 *  Returns the mutex on which the ExclusiveAccess is operating.
 */

/*!
 *  @fn void ExclusiveAccess<Type, Mutex>::relock()
 *
 *  Relocks an unlocked ExclusiveAccess.
 *
 *  @sa unlock().
 */

/*!
 *  @fn void ExclusiveAccess<Type, Mutex>::swap(ExclusiveAccess& other)
 *
 *  Swaps the mutex, data pointer, and state of this ExclusiveAccess with @a other. This operation
 *  is very fast and never fails.
 */

/*!
*  @fn void ExclusiveAccess<Type, Mutex>::unlock()
*
*  Unlocks this ExclusiveAccess. You can use relock() to lock it again. It does not need to be
*  locked when destroyed.
*
*  @sa relock().
*/

/*!
*  @fn AccessType* ExclusiveAccess<Type, Mutex>::access()
*
*  Returns a pointer to the data the ExclusiveAccess is providing access to.
*/

/*!
*  @fn const AccessType* ExclusiveAccess<Type, Mutex>::access() const
*
*  @overload
*/

/*!
*  @fn AccessType& ExclusiveAccess<Type, Mutex>::operator*()
*
*  Returns a reference to the data the ExclusiveAccess is providing access to.
*/

/*!
*  @fn const AccessType& ExclusiveAccess<Type, Mutex>::operator*() const
*
*  @overload
*/

/*!
*  @fn AccessType* ExclusiveAccess<Type, Mutex>::operator->()
*
*  Provides convenient access to the members of @a DataType for the accessible data.
*/

/*!
*  @fn const AccessType* ExclusiveAccess<Type, Mutex>::operator->() const
*
*  @overload
*/

/*!
*  @fn void ExclusiveAccess<Type, Mutex>::operator=(ExclusiveAccess&& other)
*
*  Move-assigns @a other onto this ExclusiveAccess. If this ExclusiveAccess was holding onto a
*  locked mutex before the assignment, the mutex will be unlocked. The mutex, data pointer, and
*  state of @a other is then transferred to this QMutexLocker. After the move, @a other will
*  no longer manage the mutex, nor have a valid data pointer.
*/

}
