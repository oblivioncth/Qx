namespace Qx
{
//===============================================================================================================
// Index
//===============================================================================================================

/*!
 *  @class Index qx/core/qx-index.h
 *  @ingroup qx-core
 *
 *  @brief The Index template class provides a wrapper for integers with the notion of 'first', 'last' and 'null'.
 *
 *  When working with contiguous data that must be referenced by index, it is often helpful to be able to refer to the
 *  last value of a dataset without necessarily knowing its size. Since integers only intrinsically support purely
 *  numerical values, this is often achieved by using the value -1, but this can be prone to error and require
 *  awkward handling of arithmetic, especially since implementations that use this approach also tend to simultaneously
 *  use -1 to mean 'none' in the context of searches.
 *
 *  The Index type is designed to remedy this issue by providing a more distinct representation of a set's final index
 *  via the constructor Index(Extent), which can also be used to more explicitly reference the first index. The type also
 *  can be null, providing further clarity for the 'none' case.
 *
 *  To minimize unintentional interactions, Index<T> only has comparison and arithmetic operators defined for when
 *  both operands are instances of the class and the underlying raw value must otherwise be accessed explicitly with
 *  Index<T>::operator*().
 *
 *  @par Arithmetic:
 *
 *  @par
 *  Arithmetic with indices mirrors standard integer arithmetic with the following two exceptions:
 *
 *  @par
 *  1) 'last' indices are treated as pseudo-infinite values
 *
 *  @par
 *  @snippet qx-index.cpp 0
 *
 *  @par
 *  2) Null indices are equivalent to 0.
 *
 *  @par
 *  All arithmetic for this class is constrained such that an instance's value can never be negative, nor can
 *  it underflow or overflow.
 *
 *  @par Comparison:
 *
 *  @par
 *  Comparison between indices mirrors standard integer comparison with the following two exceptions:
 *
 *  @par
 *  @li 1) Null indices are less than everything except other null indices (lowest possible value)
 *  @li 2) 'last' indices are greater than everything except other 'last' indices (highest possible value)
 */

//-Constructor----------------------------------------------------------------------------------------------
//Public:
/*!
 * @fn Index<T>::Index()
 *
 *  Creates an null index.
 */

/*!
 * @fn Index<T>::Index(Extent e)
 *
 *  Creates an index at the given extent @a e.
 */

/*!
 * @fn Index<T>::Index(T value)
 *
 *  Creates an index with the underlying @a value.
 *
 *  A value @c < 0 will result in a null index.
 */

//-Instance Functions----------------------------------------------------------------------------------------------
//Public:
/*!
 * @fn bool Index<T>::isNull() const
 *
 *  Returns @c true if the index is null; otherwise returns @c false.
 */

/*!
 * @fn bool Index<T>::isLast() const
 *
 *  Returns @c true if the index represents the last index of an arbitrary dataset; otherwise returns @c false.
 *
 *  This is equivalent to <tt>*this == Index<T>(Qx::Last)</tt>.
 */

//-Operators-------------------------------------------------------------------------------------------------------
//Public:
/*!
 * @fn bool Index<T>::operator==(const Index<T>& other) const noexcept
 *
 *  Returns @c true if this index and @a other are both null, 'last', or have the same underlying value; otherwise
 *  returns @c false.
 */

/*!
 * @fn std::strong_ordering Index<T>::operator<=>(const Index& other) const noexcept
 *
 *  Performs a three-way comparison between this index and @a other.
 *
 *  Returns:
 *  - @c <0 if this index is less than @a other
 *  - @c 0 if this index is equal to @a other
 *  - @c >0 if this index is greater than @a other
 */


/*!
 * @fn Index<T> Index<T>::operator-(const Index<T>& other)
 *
 *  Returns an index that is the difference between this index and @a other.
 */

/*!
 * @fn Index<T>& Index<T>::operator-=(const Index<T>& other)
 *
 *  Subtracts @a other from this index and returns a reference to this index.
 */

/*!
 * @fn Index<T> Index<T>::operator+(const Index<T>& other)
 *
 *  Returns an index that is the sum between this index and @a other.
 */

/*!
 * @fn Index<T>& Index<T>::operator+=(const Index<T>& other)
 *
 *  Adds @a other from this index and returns a reference to this index.
 */

/*!
 * @fn Index<T> Index<T>::operator/(const Index<T>& other)
 *
 *  Returns an index that is the quotient of this index and @a other.
 */

/*!
 * @fn Index<T>& Index<T>::operator/=(const Index<T>& other)
 *
 *  Divides @a other from this index and returns a reference to this index.
 */

/*!
 * @fn Index<T> Index<T>::operator*(const Index<T>& other)
 *
 *  Returns an index that is the product of this index and @a other.
 */

/*!
 * @fn Index<T>& Index<T>::operator*=(const Index<T>& other)
 *
 *  Multiplies @a other with this index and returns a reference to this index.
 */

/*!
 * @fn Index<T>& Index<T>::operator++()
 *
 *  Increases the index by 1, unless its 'last' or null, and returns a reference to the index.
 */

/*!
 * @fn Index<T> Index<T>::operator++(int)
 *
 *  Increases the index by 1, unless its 'last' or null, and returns a pre-increment copy of the index.
 */

/*!
 * @fn Index<T>& Index<T>::operator--()
 *
 *  Decreases the index by 1, unless its 'last' or null, and returns a reference to the index.
 */

/*!
 * @fn Index<T> Index<T>::operator--(int)
 *
 *  Decreases the index by 1, unless its 'last' or null, and returns a pre-decrement copy of the index.
 */

/*!
 * @fn T Index<T>::operator*()
 *
 *  Returns the underlying value of the index.
 *
 *  @warning The resulting value is @c std::numeric_limits<T>::max() and for 'last' indices and 0 for null indices
 *  respectively, and therefore can cause unexpected results if this operator is used blindly. Using this operator
 *  is essentially an acknowledgment that the null and 'last' states have already been checked/accounted for, or
 *  that this conversion behavior is desirable in a given context.
 */

/*!
 * @fn T Index<T>::operator*()
 *
 *  Returns the underlying value of the index.
 *
 *  @warning The resulting value is @c std::numeric_limits<T>::max() and for 'last' indices and 0 for null indices
 *  respectively, and therefore can cause unexpected results if this operator is used blindly. Using this operator
 *  is essentially an acknowledgment that the null and 'last' states have already been checked/accounted for, or
 *  that this conversion behavior is desirable in a given context.
 */

//-Outer Class Types----------------------------------------------------------------------------------------
/*!
 * @typedef Index8
 *
 * A convenience synonym for Index<qint8>
 */

/*!
 * @typedef Index16
 *
 * A convenience synonym for Index<qint16>
 */

/*!
 * @typedef Index32
 *
 * A convenience synonym for Index<qint32>
 */

/*!
 * @typedef Index64
 *
 * A convenience synonym for Index<qint64>
 */
}
