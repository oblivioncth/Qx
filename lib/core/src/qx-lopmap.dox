namespace Qx
{

/*!
 *  @concept lopmap_iterator_predicate
 *  @brief Specifies that a predicate is a valid, iterator based predicate for a lopmap.
 *
 *  Satisfied if the predicate takes a Qx::Lopmap<Key, T, Compare>::const_iterator and returns @c bool.
 */

/*!
 *  @concept lopmap_pair_predicate
 *  @brief Specifies that a predicate is a valid, pair based predicate for a lopmap.
 *
 *  Satisfied if the predicate takes a std::pair<const Key&, const T&> and returns @c bool.
 */

/*!
 *  @concept lopmap_predicate
 *  @brief Specifies that a predicate is a valid predicate for a lopmap.
 *
 *  Satisfied if the predicate satisfies lopmap_iterator_predicate or lopmap_pair_predicate.
 */

//===============================================================================================================
// Lopmap
//===============================================================================================================

/*!
 *  @class Lopmap qx/core/qx-lopmap.h
 *  @ingroup qx-core
 *
 *  @brief The Lopmap class is a template class that provides an "lopsided" associative array.
 *
 *  Qx::Lopmap<Key, T, Compare> is like QMap<Key, T>, except that values in the map are sorted
 *  by value instead of key, with an order dictated by Compare.
 *
 *  Unlike QMap, iterator is simply an alias for const_iterator as values cannot be modified through lopmap iterators
 *  since that would affect ordering. Additionally, some methods that would traditional take Key as an argument,
 *  instead take T.
 *
 *  The value type of Lopmap must provide operator<(), or a custom Compare object must be
 *  provided specifying a total order.
 */

//-Aliases--------------------------------------------------------------------------------------------------
//Public:
/*!
 *  @typedef Lopmap<Key, T, Compare>::iterator
 *  Typedef for const_iterator.
 *
 *  @typedef Lopmap<Key, T, Compare>::ConstIterator
 *  Qt-style synonym for Lopmap::const_iterator.
 *
 *  @typedef Lopmap<Key, T, Compare>::Iterator
 *  Qt-style synonym for Lopmap::iterator.
 *
 *  @typedef Lopmap<Key, T, Compare>::reverse_iterator
 *  Typedef for const_reverse_iterator.
 *
 *  @typedef Lopmap<Key, T, Compare>::ConstReverseIterator
 *  Qt-style synonym for const_reverse_iterator.
 *
 *  @typedef Lopmap<Key, T, Compare>::ReverseIterator
 *  Qt-style synonym for reverse_iterator.
 *
 *  @typedef Lopmap<Key, T, Compare>::difference_type
 *  Typedef for the container's difference type, usually std::ptrdiff_t.
 *
 *  @typedef Lopmap<Key, T, Compare>::key_type
 *  Typedef for Key.
 *
 *  @typedef Lopmap<Key, T, Compare>::mapped_Type
 *  Typedef for T.
 *
 *  @typedef Lopmap<Key, T, Compare>::size_type
 *  Typedef for the container's size_type, usually std::size_t.
 *
 *  @typedef Lopmap<Key, T, Compare>::value_compare
 *  Typedef for Compare.
 */

//-Constructor----------------------------------------------------------------------------------------------
//Public:
/*!
 *  @fn Lopmap<Key, T, Compare>::Lopmap()
 *
 *  Creates an empty lopmap.
 *
 *  @sa clear().
 */

/*!
 * @fn Lopmap<Key, T, Compare>::Lopmap(std::initializer_list<std::pair<Key, T>> list)
 *
 *  Creates a lopmap with a copy of each of the elements in the initializer list @a list.
 */

//-Instance Functions----------------------------------------------------------------------------------------------
//Public:
/*!
 *  @fn iterator Lopmap<Key, T, Compare>::begin()
 *
 *  Same as constBegin().
 */

/*!
 *  @fn iterator Lopmap<Key, T, Compare>::begin() const
 *
 *  @overload
 */

/*!
 *  @fn const_iterator Lopmap<Key, T, Compare>::cbegin() const
 *
 *  Same as constBegin().
 */

/*!
 *  @fn const_iterator Lopmap<Key, T, Compare>::constBegin() const
 *
 *  Returns an STL-style iterator pointing to the first item in the lopmap.
 *
 *  @sa constEnd().
 */

/*!
 *  @fn iterator Lopmap<Key, T, Compare>::end()
 *
 *  Same as constEnd().
 */

/*!
 *  @fn const_iterator Lopmap<Key, T, Compare>::end() const
 *
 *  @overload
 */

/*!
 *  @fn const_iterator Lopmap<Key, T, Compare>::cend() const
 *
 *  Same as constEnd().
 */

/*!
 *  @fn const_iterator Lopmap<Key, T, Compare>::constEnd() const
 *
 *  Returns an STL-style iterator pointing to the imaginary item after the last item in the lopmap.
 *
 *  @sa constBegin().
 */

/*!
 *  @fn reverse_iterator Lopmap<Key, T, Compare>::rbegin()
 *
 *  Same as constReverseBegin().
 */

/*!
 *  @fn const_reverse_iterator Lopmap<Key, T, Compare>::rbegin() const
 *
 *  @overload
 */

/*!
 *  @fn const_reverse_iterator Lopmap<Key, T, Compare>::crbegin() const
 *
 *  Same as constReverseBegin().
 */

/*!
 *  @fn const_reverse_iterator Lopmap<Key, T, Compare>::constReverseBegin() const
 *
 *  Returns an STL-style iterator pointing to the last item in the lopmap.
 *
 *  @sa constReverseEnd().
 */

/*!
 *  @fn reverse_iterator Lopmap<Key, T, Compare>::rend()
 *
 *  Same as constReverseEnd().
 */

/*!
 *  @fn const_reverse_iterator Lopmap<Key, T, Compare>::rend() const
 *
 *  @overload
 */

/*!
 *  @fn const_reverse_iterator Lopmap<Key, T, Compare>::crend() const
 *
 *  Same as constReverseEnd().
 */

/*!
 *  @fn const_reverse_iterator Lopmap<Key, T, Compare>::constReverseEnd() const
 *
 *  Returns an STL-style iterator pointing to the imaginary item after the first item in the lopmap.
 *
 *  @sa constReverseBegin().
 */

/*!
 *  @fn iterator Lopmap<Key, T, Compare>::find(const Key& key)
 *
 *  Same as constFind().
 */

/*!
 *  @fn const_iterator Lopmap<Key, T, Compare>::find(const Key& key) const
 *
 *  @overload
 */

/*!
 *  @fn const_iterator Lopmap<Key, T, Compare>::constFind(const Key& key) const
 *
 *  Returns an iterator pointing to the item with the key @a key in the lopmap.
 *
 *  If the lopmaps contains no item with the key @a key, the function returns constEnd().
 */

/*!
 *  @fn iterator Lopmap<Key, T, Compare>::lowerBound(const T& value)
 *
 *  Returns an iterator pointing to the first item with value @a value in the lopmap. If the map contains no
 *  item with value @a value, the function returns an iterator to the nearest item with a greater value,
 *  or constEnd() if there is none.
 *
 *  @sa upperBound() and find().
 */

/*!
 *  @fn const_iterator Lopmap<Key, T, Compare>::lowerBound(const T& value) const
 *
 *  @overload
 */

/*!
 *  @fn iterator Lopmap<Key, T, Compare>::upperBound(const T& value)
 *
 *  Returns an iterator pointing to the item that immediately follows the last item with value @a value in the
 *  lopmap. If the map contains no item with value @a value, the function returns an iterator to the nearest
 *  item with a greater value, or constEnd() if there is none.
 *
 *  @sa lowerBound() and find().
 */

/*!
 *  @fn const_iterator Lopmap<Key, T, Compare>::upperBound(const T& value) const
 *
 *  @overload
 */

/*!
 *  @fn std::pair<iterator, iterator> Lopmap<Key, T, Compare>::equal_range(const T& value)
 *
 *  Returns a pair of iterators delimiting the range of values [first, second), that are stored with @a value.
 */

/*!
 *  @fn std::pair<const_iterator, const_iterator> Lopmap<Key, T, Compare>::equal_range(const T& value) const
 *
 *  @overload
 */

/*!
 *  @fn const T& Lopmap<Key, T, Compare>::first() const
 *
 *  Returns a reference to the first value in the lopmap.
 *
 *  This function assumes that the map is not empty.
 *
 *  @sa last(), firstKey(), and isEmpty().
 */

/*!
 *  @fn const Key& Lopmap<Key, T, Compare>::firstKey() const
 *
 *  Returns a reference to the first key in the lopmap.
 *
 *  This function assumes that the map is not empty.
 *
 *  @sa lastKey(), first(), and isEmpty().
 */

/*!
 *  @fn const T& Lopmap<Key, T, Compare>::last() const
 *
 *  Returns a reference to the last value in the lopmap.
 *
 *  This function assumes that the map is not empty.
 *
 *  @sa last(), firstKey(), and isEmpty().
 */

/*!
 *  @fn const Key& Lopmap<Key, T, Compare>::lastKey() const
 *
 *  Returns a reference to the last key in the lopmap.
 *
 *  This function assumes that the map is not empty.
 *
 *  @sa lastKey(), first(), and isEmpty().
 */

/*!
 *  @fn Key Lopmap<Key, T, Compare>::key(const T& value, const Key& defaultKey) const
 *
 *  Returns the key with value @a value, or @a defaultKey if the lopmap contains no item with @a value. If no
 *  @a defaultKey is provided the functionr returns a default-constructed key.
 *
 *  This function can be slow, because Lopmap's internal data structure is optimized for fast lookup by key,
 *  not by value.
 *
 *  @sa value(), and keys().
 */

/*!
 *  @fn iterator Lopmap<Key, T, Compare>::erase(const_iterator pos)
 *
 *  Removes the (key, value) pair pointed to by the iterator @a pos from the lopmap, and returns an
 *  iterator to the next item in the map.
 *
 *  @note The iterator @a pos @e must be valid and dereferenceable.
 *
 *  @sa remove(), and take().
 */

/*!
 *  @fn iterator Lopmap<Key, T, Compare>::erase(const_iterator first, const_iterator last)
 *
 *  Removes the (key, value) pairs pointed to by the iterator range [<em>first</em>, <em>last</em>) from the lopmap,
 *  and returns an iterator to the item in the map following the last removed element.
 *
 *  @note The range @c [first, @c last) @e must be a valid range in @c *this.
 *
 *  @sa remove(), and take().
 */

/*!
 *  @fn void Lopmap<Key, T, Compare>::insert(Lopmap&& other)
 *
 *  Moves all the items from @a other into this lopmap.
 *
 *  If a key is common to both maps, its value with be replaced with the value stored in @a other.
 */

/*!
 *  @fn void Lopmap<Key, T, Compare>::insert(const Lopmap& other)
 *
 *  Inserts all the items in the @a other lopmap into this lopmap.
 *
 *  If a key is common to both maps, its value with be replaced with the value stored in @a other.
 */

/*!
 *  @fn iterator Lopmap<Key, T, Compare>::insert(const Key& key, const T& value)
 *
 *  Inserts a new item with the key @a key and value of @a value.
 *
 *  If there is already an item with the key @a key, that item's value is replaced with @a value.
 *
 *  Returns an iterator pointing to the new/updated element.
 */

/*!
 *  @fn iterator Lopmap<Key, T, Compare>::insert(const_iterator pos, const Key& key, const T& value)
 *
 *  Inserts a new item with the key @a key and value @a value and with hint @a pos suggesting where to do
 *  the insert.
 *
 *  If constBegin() is used as hint it indicates that the @a value should come before any value in the map
 *  while constEnd() suggests that the @a value should (strictly) come after any key in the map. Otherwise,
 *  the hint should meet the condition (pos - 1).value() < value <= pos.value() (assuming a Comapre of
 *  std::less<Value>). If the hint @a pos is wrong it is ignored and a regular insert is done.
 *
 *  If there is already an item with the key @a key, that item's value is replaced with @a value.
 *
 *  If the hint is correct, the insert executes in amortized constant time.
 *
 *  When creating a map from sorted data inserting the last value first with constBegin() is faster than
 *  inserting in sorted order with constEnd(), since constEnd() - 1 (which is needed to check if the hint
 *  is valid) needs logarithmic time.
 *
 *  Returns an iterator pointing to the new/updated element.
 */

/*!
 *  @fn bool Lopmap<Key, T, Compare>::contains(const Key& key) const
 *
 *  Returns @c true if the lopmap contains an item with the key @a key; otherwise,
 *  returns @c false.
 *
 *  @sa count().
 */

/*!
 *  @fn size_type Lopmap<Key, T, Compare>::remove(const Key& key)
 *
 *  Remove the item with key @a key from the map if it exists and returns @c 1; otherwise, returns @c 0.
 *
 *  @sa clear() and take().
 */

/*!
 *  @fn qsizetype Lopmap<Key, T, Compare>::removeIf(Predicate pred)
 *
 *  Removes all elements for which the predicate @a pred returns true from the lopmap.
 *
 *  The function supports predicates which take either an argument of type Lopmap<Key, T, Compare>::const_iterator,
 *  or an argument of type std::pair<const Key&, const T&>.
 *
 *  Returns the number of elements removed, if any.
 *
 *  @sa clear() and take().
 */

/*!
 *  @fn T Lopmap<Key, T, Compare>::take(const Key& key)
 *
 *  Removes the item with the key @a key from the lopmap and returns the value
 *  associated with it.
 *
 *  If this item does not exist in the lopmap, the function simply returns a default-constructed value
 *
 *  If you don't use the return value, remove() is more efficient.
 *
 *  @sa remove().
 */

/*!
 *  @fn void Lopmap<Key, T, Compare>::swap(Lopmap<Key, t>& other)
 *
 *  Swaps lopmap @a other with this lopmap. This operation is very fast and never fails.
 */

/*!
 *  @fn qsizetype Lopmap<Key, T, Compare>::size() const
 *
 *  Returns the number of items in the lopmap.
 *
 *  @sa isEmpty() and count().
 */

/*!
 *  @fn qsizetype Lopmap<Key, T, Compare>::count() const
 *
 *  Same as size().
 */

/*!
 *  @fn bool Lopmap<Key, T, Compare>::isEmpty() const
 *
 *  Returns @c true if the lopmap contains no items; otherwise, returns @c false.
 *
 *  @sa size().
 */

/*!
 *  @fn bool Lopmap<Key, T, Compare>::empty() const
 *
 *  Same as isEmpty().
 */

/*!
 *  @fn void Lopmap<Key, T, Compare>::clear()
 *
 *  Removes all items from the lopmap.
 *
 *  @sa remove().
 */

/*!
 *  @fn T Lopmap<Key, T, Compare>::value(const Key& key, const T& defaultValue) const
 *
 *  Returns the value associated with the key @a key.
 *
 *  If the lopmap contains no item with key @a key, the function returns @a defaultValue.
 *  If no @a defaultValue is specified, the function returns a default-constructed value.
 *
 *  @sa key(), values(), contains(), and operator[]().
 */

/*!
 *  @fn QList<Key> Lopmap<Key, T, Compare>::keys() const
 *
 *  Returns a list containing all of the keys in the lopmap in order of their associated values.
 *
 *  The order is guaranteed to be the same as that used by values().
 *
 *  This function creates a new list, in linear time.
 *
 *  @sa values() and key().
 */

/*!
 *  @fn QList<Key> Lopmap<Key, T, Compare>::keys(const T& values) const
 *
 *  Returns a list containing all of the keys associated with the value @a value in order of their
 *  associated values.
 *
 *  This function creates a new list, in linear time.
 */

/*!
 *  @fn QList<T> Lopmap<Key, T, Compare>::values() const
 *
 *  Returns a list containing all of the values in the lopmap in order.
 *
 *  This function creates a new list, in linear time. The time and memory use that entails can be
 *  avoided by iterating from begin() to end().
 *
 *  @sa keys() and value().
 */

//-Operators---------------------------------------------------------------------------------------------
//Public:
/*!
 *  @fn T Lopmap<Key, T, Compare>::operator[](const Key& key) const
 *
 *  Same as value().
 */

/*!
 *  @fn bool Lopmap<Key, T, Compare>::operator==(const Lopmap& other) const
 *
 *  Returns @c true if @a other is equal to this lopmap; otherwise, returns @c false.
 *
 *  Two lopmap's are considered equal if they contain the same (key, value) pairs.
 *
 *  This function requires the key and the value types to implement @c operator==().
 *
 *  @sa operator!=().
 */

/*!
 *  @fn bool Lopmap<Key, T, Compare>::operator!=(const Lopmap& other) const
 *
 *  Returns @c true if @a other is not equal to this lopmap; otherwise, returns @c false.
 *
 *  Two lopmap's are considered equal if they contain the same (key, value) pairs.
 *
 *  This function requires the key and the value types to implement @c operator==().
 *
 *  @sa operator==().
 */

//===============================================================================================================
// Lopmap::const_iterator
//===============================================================================================================

/*!
 *  @class Lopmap::const_iterator qx/core/qx-lopmap.h
 *  @ingroup qx-core
 *
 *  @brief The Lopmap::const_iterator class provides an STL-style const iterator for Lopmap.
 *
 *  Lopmap<Key, T, Compare>::const_iterator allows you to iterate over a Lopmap.
 *
 *  The default Lopmap::const_iterator constructor creates an uninitialized iterator. You must initialize it using
 *  a Lopmap function like Lopmap::cbegin(), Lopmap::cend(), or Lopmap::constFind() before you can start iterating.
 *
 *  Lopmap stores its items ordered according to Compare.
 *
 *  Multiple iterators can be used on the same map. If you add items to the map, existing iterators will remain
 *  valid. If you remove items from the map, iterators that point to the removed items will become dangling iterators.
 *
 *  Inserting relationships into the lopmap or calling methods such as Lopmap::reserve() or Lopmap::squeeze() can
 *  invalidate all iterators pointing into the lopmap. Iterators are guaranteed to stay valid only as long as the
 *  Lopmap doesn't have to grow/shrink its internal table. Using any iterator after a rehashing operation has
 *  occurred will lead to undefined behavior
 */

//-Aliases----------------------------------------------------------------------------------------------
//Public:
/*!
 *  @typedef Lopmap<Key, T, Compare>::const_iterator::iterator_category
 *  A synonym for std::bidirectional_iterator_tag indicating this iterator is a bidirectional iterator.
 */
//-Constructor----------------------------------------------------------------------------------------------
//Public:
/*!
 *  @fn Lopmap<Key, T, Compare>::const_iterator::const_iterator()
 *
 *  Constructs an uninitialized iterator.
 *
 *  Functions like key(), value(), and operator++() must not be called on an uninitialized iterator.
 *  Use operator=() to assign a value to it before using it.
 *
 *  @sa Lopmap::constBegin() and Lopmap::constEnd().
 */

//-Instance Functions----------------------------------------------------------------------------------------------
//Public:
/*!
 *  @fn const Key& Lopmap<Key, T, Compare>::const_iterator::key() const
 *
 *  Returns the current item's key.
 *
 *  @sa value() and operator*().
 */

/*!
 *  @fn const T& Lopmap<Key, T, Compare>::const_iterator::value() const
 *
 *  Returns the current item's value.
 *
 *  @sa key().
 */

//-Operators---------------------------------------------------------------------------------------------
//Public:
/*!
 *  @fn bool Lopmap<Key, T, Compare>::const_iterator::operator==(const const_iterator& other) const
 *
 *  Returns @c true if @a other points to the same item as this iterator; otherwise, returns @c false.
 */

/*!
 *  @fn const T& Lopmap<Key, T, Compare>::const_iterator::operator*() const
 *
 *  Returns the current item's value.
 *
 *  @sa key().
 */

/*!
 *  @fn const_iterator Lopmap<Key, T, Compare>::const_iterator::operator++()
 *
 *  The prefix @c ++ operator @c (++i) advances the iterator to the next item in the lopmap and
 *  returns an iterator to the new item relationship.
 *
 *  Calling this function on Lopmap::constEnd() leads to undefined results.
 *
 *  @sa operator--().
 */

/*!
 *  @fn const_iterator Lopmap<Key, T, Compare>::const_iterator::operator++(int)
 *
 *  The postfix @c ++ operator @c (i++) advances the iterator to the next item in the lopmap and
 *  returns an iterator to the previously current item.
 *
 *  Calling this function on Lopmap::constEnd() leads to undefined results.
 */

/*!
 *  @fn const_iterator Lopmap<Key, T, Compare>::const_iterator::operator--()
 *
 *  The prefix @c -- operator @c (--i) makes the preceding item current and
 *  returns an iterator to the new current item.
 *
 *  Calling this function on Lopmap::constBegin() leads to undefined results.
 *
 *  @sa operator++().
 */

/*!
 *  @fn const_iterator Lopmap<Key, T, Compare>::const_iterator::operator--(int)
 *
 *  The postfix @c -- operator @c (--i) makes the preceding item current and
 *  returns an iterator to the previously current item.
 *
 *  Calling this function on Lopmap::constEnd() leads to undefined results.
 */

/*!
 *  @fn const T* Lopmap<Key, T, Compare>::const_iterator::operator->() const
 *
 *  Returns a pointer to the current item's value.
 *
 *  @sa value().
 */

//===============================================================================================================
// Lopmap::const_reverse_iterator
//===============================================================================================================

/*!
 *  @class Lopmap::const_reverse_iterator qx/core/qx-lopmap.h
 *  @ingroup qx-core
 *
 *  @brief The Lopmap::const_reverse_iterator class provides an STL-style const reverse iterator for Lopmap.
 *
 *  Same as Lopmap<Key, T, Compare>::const_iterator, except that it works in the opposite direction.
 */

}
