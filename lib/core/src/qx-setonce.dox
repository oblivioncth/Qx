namespace Qx
{
//===============================================================================================================
// SetOnce
//===============================================================================================================

/*!
 *  @class SetOnce<T, C> qx/core/qx-setonce.h
 *  @ingroup qx-core
 *
 *  @brief The SetOnce template class acts as a container for a value that can only be set once.
 *
 *  The optional @a C template parameter (defaults to @c void) can be used to provide a comparator
 *  (such as std::equal_to), which is then used to reject assignment if the passed value is the same
 *  as the containers default.
 *
 *  @sa operator=().
 */

//-Constructor----------------------------------------------------------------------------------------------
//Public:
/*!
 * @fn SetOnce<T, C>::SetOnce(T initial, C&& comp = C())
 *
 *  Creates a SetOnce container that holds the initial value @a initial.
 *
 *  The container is initially unset and only holds this value until it is set.
 *
 *  When C is not @c void, @a comp is used to compare the input value to the container's
 *  default value when performing an assignment.
 *
 *  @sa operator=(const T& value).
 */

//-Instance Functions----------------------------------------------------------------------------------------------
//Public:
/*!
 * @fn SetOnce<T, C>::isSet() const
 *
 *  Returns @c true if the containers value has been set; otherwise returns @c false.
 */

/*!
 * @fn const T& SetOnce<T, C>::value() const
 *
 *  Returns the current value of the container.
 */

/*!
 * @fn void SetOnce<T, C>::reset()
 *
 *  Resets the container to its initial state.
 *
 *  The containers value will revert to the value specified in its constructor and will be considered unset.
 *
 *  @sa operator=().
 */

/*!
 * @fn SetOnce<T, C>& SetOnce<T, C>::operator=(const T& value)
 *
 *  Sets the value of the container to @a value. If C is not @c void and @a value is
 *  the same as the container's default value, the container is not considered to
 *  be set.
 *
 *  To clarify:
 *  - C = void: Any assignment causes the container to be considered set.
 *  - C satisfies @ref Qx::comparator<C, T> : Only assignment of a value other than the default
 *    causes the container to be considered set.
 *
 *  Once the containers value has been set it cannot be changed again until it is reset.
 *
 *  @sa reset().
 */

//-Instance Functions----------------------------------------------------------------------------------------------
//Public:
/*!
 * @fn const T& SetOnce<T, C>::operator*() const
 *
 *  Same as value().
 */

/*!
 * @fn const T* SetOnce<T, C>::operator->() const
 *
 *  Allows access to members of T for the value of the container.
 */

/*!
 * @fn SetOnce<T, C>::operator bool() const
 *
 *  Produces the boolean value @c true if the container is set; otherwise, produces @c false.
 */


}
