namespace Qx
{
//===============================================================================================================
// SetOnce
//===============================================================================================================

/*!
 *  @class SetOnce qx/core/qx-setonce.h
 *  @ingroup qx-core
 *
 *  @brief The SetOnce template class acts as a container for a value that can only be set once.
 *
 *  The optional @a CompareEq template parameter can be used to provide a custom compare-equal function
 *  object type.
 */

//-Constructor----------------------------------------------------------------------------------------------
//Public:
/*!
 * @fn SetOnce<T, CompareEq>::SetOnce(T initial, const CompareEq& comp)
 *
 *  Creates a SetOnce container that holds the initial value @a initial.
 *
 *  The container is initially unset and only holds this value until it is set.
 *
 *  Optionally, a custom compare-equal function can be provided through @a comp, which
 *  is used to determine whether or not an assigned value is different from the
 *  container's initial value.
 *
 *  @sa operator=(const T& value).
 */


//-Instance Functions----------------------------------------------------------------------------------------------
//Public:
/*!
 * @fn SetOnce<T, CompareEq>::isSet() const
 *
 *  Returns @c true if the containers value has been set; otherwise returns @c false.
 */

/*!
 * @fn const T& SetOnce<T, CompareEq>::value() const
 *
 *  Returns the current value of the container.
 */

/*!
 * @fn void SetOnce<T, CompareEq>::reset()
 *
 *  Resets the container to its initial state.
 *
 *  The containers value will revert to the value specified in its constructor and will be considered unset.
 *
 *  @sa operator=().
 */

/*!
 * @fn SetOnce<T, CompareEq>& SetOnce<T, CompareEq>::operator=(const T& value)
 *
 *  Sets the value of the container to @a value, if it is different from its initial value.
 *
 *  Once the containers value has been set it cannot be changed again until it is reset.
 *
 *  @sa reset().
 */
}
