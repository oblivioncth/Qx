/*!
 *  @file qx-helpers.h
 *  @ingroup qx-utility
 *
 *  @brief The qx-concepts header file provides a set of various convenience functions that are
 *  are designed to facilitate common fundamental tasks with as brief syntax as possible.
 */

namespace Qx
{
//===============================================================================================================
// ScopedConnection
//===============================================================================================================

/*!
 *  @class ScopedConnection qx/utility/qx-helpers.h
 *  @ingroup qx-core
 *
 *  @brief The ScopedConnection class disconnects a connection when it goes out of scope
 *
 *  This is useful when you have a connection that you want disconnected when a certain context is left,
 *  but do not have a QObject based context object to use.
 *
 *  @sa scopedConnect().
 */

//-Constructor----------------------------------------------------------------------------------------------
//Public:
/*!
 *  @fn ScopedConnection::ScopedConnection(const QMetaObject::Connection& connection)
 *
 *  Creates a scoped connection guard from @a connection.
 */

/*!
 *  @fn ScopedConnection::ScopedConnection(ScopedConnection&& other)
 *
 *  Move constructs a ScopedConnection from @a other.
 */

//-Destructor-------------------------------------------------------------------------------------------------
//Public:
/*!
 *  @fn ScopedConnection::~ScopedConnection()
 *
 *  Destroys the scoped connection guard. The underlying connection will be disconnected if it's valid.
 */

//-Operators--------------------------------------------------------------------------------------------------
//Public:
/*!
 *  @fn ScopedConnection::operator bool() const
 *
 *  Returns @c true if the underlying connection is valid (was successful when connect was called); otherwise,
 *  returns @c false.
 */

//Public:
/*!
 *  @fn ScopedConnection& ScopedConnection::operator=(ScopedConnection&& other)
 *
 *  Move assigns this ScopedCOnnection using @a other.
 */

//Namespace Functions----------------------------------------------------------
/*!
 *  @fn ScopedConnection scopedConnect(const QObject* sender, PointerToMemberFunction signal, Functor&& functor)
 *
 *  The same as QObject::connect(const QObject* sender, PointerToMemberFunction signal, Functor functor), but
 *  the resulting connection handle is returned as a ScopedConnection instead.
 */

/*!
 *  @typedef container_arrow_result
 *  See container_arrow_operator().
 *
 *  @concept arrowable_container_type
 *  See container_arrow_operator().
 *
 *  @fn container_arrow_result<T> container_arrow_operator(T& data)
 *
 *  This helper function exists so that most types of containers can more easily implement operator->(), for
 *  any template where it makes sense to have one, and have chaining work correctly.
 *
 *  Example:
 *  @snippet qx-helpers.cpp 1
 */

}

//Non-namespace Structs----------------------------------------------------------
/*!
 *  @struct qxFuncAggregate
 *
 *  A template struct that takes an arbitrary number of functors as arguments and, when
 *  instantiated, produces a struct with all `operator()` overloads from all provided functors.
 *
 *  This helper struct is commonly used in the `std::variant` overload visit pattern to concisely
 *  implement a handler for all alternatives:
 *
 *  @snippet qx-helpers.cpp 0
 */

//Non-namespace Functions----------------------------------------------------------
/*!
 *  @fn const T qxAsConst(T&& t)
 *
 *  Serves the same purpose as std::as_const() (preventing implicitly-shared Qt containers from
 *  detaching), but this version works for rvalues, albeit with some efficiency concerns
 *  depending on the nature of @a t.
 */

/*!
 *  @fn std::add_const<T>::type qxAsConst(T& t)
 *  @overload
 *
 *  Equivalent to std::as_const(T& t).
 *
 *  This overload exists so that qxAsConst can consistently be used everywhere for both
 *  lvalues and rvalues, instead of having to employ mixed usage of qxAsConst() and
 *  std::as_const().
 */

/*!
 *  @fn void qxDelete(T*& pointer)
 *
 *  Calls @c delete on @a pointer and then sets it to @c nullptr .
 */
